require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe PeticionsoftwaresController do

  login_pepito
  # This should return the minimal set of attributes required to create a valid
  # Peticionsoftware. As you add validations to Peticionsoftware, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      :user =>  @pepito,
      :cursoacademico_id => 1,
      :title        => "R", 
      :titulacion   => "Grado en Informatica", 
      :curso        => "Primero",
      :asignatura   => "Calculo",
      :software     => "R version 11.4",
      :sistemaoperativo => "Windows",
      :fechacomienzo => 1.month.from_now,
      :fechayhora  => Time.now,
      :laboratorio_ids => FactoryGirl.create(:laboratorio).id
    }
  end

  def form_attributes
    {
      :cursoacademico_id => 1,
      :title        => "R", 
      :titulacion   => "Grado en Informatica", 
      :curso        => "Primero",
      :asignatura   => "Calculo",
      :software     => "R version 11.4",
      :sistemaoperativo => "Windows",
      :fechacomienzo => 1.month.from_now,
      :laboratorio_ids => 2.times.map { FactoryGirl.create(:laboratorio).id}
    }
  end


  describe "GET index" do
    it "assigns all peticionsoftwares as @peticionsoftwares" do
      peticionsoftware = Peticionsoftware.create! valid_attributes
      get :index
      assigns(:peticionsoftwares).should eq([peticionsoftware])
    end
  end

  describe "GET show" do
    it "assigns the requested peticionsoftware as @peticionsoftware" do
      peticionsoftware = Peticionsoftware.create! valid_attributes
      get :show, {:id => peticionsoftware.to_param}
      assigns(:peticionsoftware).should eq(peticionsoftware)
    end
  end

  describe "GET new" do
    it "assigns a new peticionsoftware as @peticionsoftware" do
      get :new
      assigns(:peticionsoftware).should be_a_new(Peticionsoftware)
    end
  end

  describe "GET edit" do
    it "assigns the requested peticionsoftware as @peticionsoftware" do
      peticionsoftware = Peticionsoftware.create! valid_attributes
      get :edit, {:id => peticionsoftware.to_param}
      assigns(:peticionsoftware).should eq(peticionsoftware)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Peticionsoftware" do
        expect {
          post :create, {:peticionsoftware => form_attributes}
        }.to change(Peticionsoftware, :count).by(1)
      end

      it "assigns a newly created peticionsoftware as @peticionsoftware" do
        post :create, {:peticionsoftware => form_attributes}
        assigns(:peticionsoftware).should be_a(Peticionsoftware)
        assigns(:peticionsoftware).should be_persisted
      end

      it "redirects to the created peticionsoftware" do
        post :create, {:peticionsoftware => form_attributes}
        response.should redirect_to(peticionsoftwares_path)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved peticionsoftware as @peticionsoftware" do
        # Trigger the behavior that occurs when invalid params are submitted
        Peticionsoftware.any_instance.stub(:save).and_return(false)
        post :create, {:peticionsoftware => { "title" => nil }}
        assigns(:peticionsoftware).should be_a_new(Peticionsoftware)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        Peticionsoftware.any_instance.stub(:save).and_return(false)
        post :create, {:peticionsoftware => { "title" => "invalid value" }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested peticionsoftware" do
        peticionsoftware = Peticionsoftware.create! valid_attributes
        # Assuming there are no other peticionsoftwares in the database, this
        # specifies that the Peticionsoftware created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        Peticionsoftware.any_instance.should_receive(:update_attributes).with({ "title" => "MyString", "laboratorio_ids"=>[] }, )
        put :update, {:id => peticionsoftware.to_param, :peticionsoftware => { "title" => "MyString", "laboratorio_ids"=>[] }}
      end

      it "assigns the requested peticionsoftware as @peticionsoftware" do
        peticionsoftware = Peticionsoftware.create! valid_attributes
        put :update, {:id => peticionsoftware.to_param, :peticionsoftware => { "title" => "MyString" }}

        assigns(:peticionsoftware).should eq(peticionsoftware)
      end

      it "redirects to the peticionsoftware" do
        peticionsoftware = Peticionsoftware.create! valid_attributes
        put :update, {:id => peticionsoftware.to_param, :peticionsoftware => form_attributes}
        response.should redirect_to(peticionsoftwares_path)
      end
    end

    describe "with invalid params" do
      it "assigns the peticionsoftware as @peticionsoftware" do
        peticionsoftware = Peticionsoftware.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Peticionsoftware.any_instance.stub(:save).and_return(false)
        put :update, {:id => peticionsoftware.to_param, :peticionsoftware => { "title" => "invalid value" }}
        assigns(:peticionsoftware).should eq(peticionsoftware)
      end

      it "re-renders the 'edit' template" do
        peticionsoftware = Peticionsoftware.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        Peticionsoftware.any_instance.stub(:save).and_return(false)
        put :update, {:id => peticionsoftware.to_param, :peticionsoftware => { "title" => "invalid value" }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested peticionsoftware" do
      peticionsoftware = Peticionsoftware.create! valid_attributes
      expect {
        delete :destroy, {:id => peticionsoftware.to_param}
      }.to change(Peticionsoftware, :count).by(-1)
    end

    it "redirects to the peticionsoftwares list" do
      peticionsoftware = Peticionsoftware.create! valid_attributes
      delete :destroy, {:id => peticionsoftware.to_param}
      response.should redirect_to(peticionsoftwares_url)
    end
  end

end
